version: '3.8'

# Definición de redes personalizadas
networks:
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Definición de volúmenes persistentes
volumes:
  mongodb-data:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local

# Servicios de la aplicación
services:
  # Base de datos MongoDB
  mongodb:
    image: mongo:7-jammy
    container_name: todo-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=todoapp
    volumes:
      - mongodb-data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d:ro
    networks:
      - backend-network
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: todo-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: todo-backend:1.0.0
    container_name: todo-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/todoapp
      - REDIS_URL=redis://redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  # Worker para procesamiento en background
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    image: todo-worker:1.0.0
    container_name: todo-worker
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/todoapp
      - REDIS_URL=redis://redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost/api
    image: todo-frontend:1.0.0
    container_name: todo-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost/api
    depends_on:
      - backend
    networks:
      - frontend-network
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  # Nginx Reverse Proxy y Load Balancer
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: todo-nginx:1.0.0
    container_name: todo-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    networks:
      - frontend-network
    ports:
      - "80:80"
    volumes:
      - nginx-logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
