version: '3.8'

# Redes para Swarm
networks:
  frontend-network:
    driver: overlay
    attachable: true
  backend-network:
    driver: overlay
    attachable: true

# Volúmenes
volumes:
  mongodb-data:
  redis-data:
  nginx-logs:

# Configuraciones (Configs)
configs:
  nginx_config:
    file: ../nginx/nginx.conf
  mongodb_init:
    file: ../mongodb-init/init-mongo.js

# Secretos (Secrets)
secrets:
  mongodb_password:
    external: true

services:
  # MongoDB con réplicas
  mongodb:
    image: mongo:7-jammy
    networks:
      - backend-network
    volumes:
      - mongodb-data:/data/db
    configs:
      - source: mongodb_init
        target: /docker-entrypoint-initdb.d/init-mongo.js
    environment:
      - MONGO_INITDB_DATABASE=todoapp
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache con réplicas
  redis:
    image: redis:7-alpine
    networks:
      - backend-network
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Backend API con múltiples réplicas y versionamiento
  backend:
    image: kryshor/todo-backend:1.2.0
    networks:
      - backend-network
      - frontend-network
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://todoapp_mongodb:27017/todoapp
      - REDIS_URL=redis://todoapp_redis:6379
    deploy:
      replicas: 3
      labels:
        - "com.example.version=1.0.0"
        - "com.example.service=backend"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker con réplicas
  worker:
    image: todo-worker:1.0.0
    networks:
      - backend-network
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://todoapp_mongodb:27017/todoapp
      - REDIS_URL=redis://todoapp_redis:6379
    deploy:
      replicas: 2
      labels:
        - "com.example.version=1.0.0"
        - "com.example.service=worker"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s

  # Frontend con réplicas
  frontend:
    image: todo-frontend:1.0.0
    networks:
      - frontend-network
    environment:
      - REACT_APP_API_URL=http://localhost/api
    deploy:
      replicas: 2
      labels:
        - "com.example.version=1.0.0"
        - "com.example.service=frontend"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: todo-nginx:1.0.0
    networks:
      - frontend-network
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
    configs:
      - source: nginx_config
        target: /etc/nginx/conf.d/default.conf
    volumes:
      - nginx-logs:/var/log/nginx
    deploy:
      replicas: 2
      labels:
        - "com.example.version=1.0.0"
        - "com.example.service=nginx"
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.10'
          memory: 64M
      update_config:
        parallelism: 1
        delay: 10s
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
